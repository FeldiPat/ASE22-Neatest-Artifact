{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./index.js","webpack:///./src/block-filter.js","webpack:///./src/control-dependence-graph.js","webpack:///./src/control-flow-graph.js","webpack:///./src/graph-utils.js","webpack:///./src/post-dominator-tree.js","webpack:///./src/utils.js"],"names":["MotionFilter","directionChange","block","opcode","directionSet","positionChange","positionSet","xSet","ySet","motionBlock","startsWith","endsWith","LooksFilter","backdropChange","nextBackdrop","backdropSet","costumeChange","costumeSet","sizeChange","sizeSet","visibilitySet","sayBlock","thinkBlock","backdropBlock","looksBlock","SoundFilter","play","soundBlock","EventFilter","userEvent","greenFlag","hatEvent","broadcastSend","broadcastReceive","broadcastMenu","cloneCreate","cloneStart","cloneMenu","backdropStart","eventSend","eventReceive","eventBlock","ControlFilter","controlBlock","singleBranch","doubleBranch","branch","hatBlock","executionHaltingBlock","SensingFilter","askBlock","sensingBlock","VariableFilter","set","update","variableBlock","OperatorFilter","arithmetic","relational","logical","negatable","ListFilter","listBlock","MusicFilter","musicBlock","CustomFilter","customBlock","defineBlock","PenFilter","penBlock","Text2SpeechFilter","text2speechBlock","StatementFilter","isStatementBlock","topLevel","ControlDependenceGraph","Graph","_augmentCFG","cfg","start","addNode","addEdge","entry","exit","_findEdgeSetS","reversedPDT","allNodes","Set","getAllNodes","edges","node","succ","successors","id","getTransitiveSuccessors","has","add","Edge","_computeLeastCommonAncestors","postDominatedTree","leastCommonAncestors","Map","edge","leastCommonAncestor","getLeastCommonAncestor","from","to","_findControlDependencies","controlDependencyMap","markedNodes","l","get","current","undefined","preds","predecessors","values","next","value","alreadyMarked","marked","_computeControlDependenceGraph","GraphNode","controlDependenceGraph","controlDependencies","entries","controlDependency","generateCDG","cloneGraph","computePostDominatedTree","reversedPostDominatedTree","reverseGraph","cdg","ControlFlowGraph","constructor","entryNode","exitNode","EventNode","event","UserEventNode","_extendBasicBlockSuccessors","shouldSuccessors","startNode","extra","_extendBasicBlockSuccessors2","visited","recv","getNode","remove","suc","put","_fixControlStatement","controlNode","controlStmt","branchStart","getBranchStart","ifBranchStart","afterControl","getAsArray","filter","n","elseBranchStart","getElseBranchStart","removeAll","stopOption","Extract","console","log","_fixControlStatements","find","push","fixControlStatements","addOrGetUserEventNode","targets","userEvents","name","substring","clickedSprite","clickedKey","fields","WHENGREATERTHANMENU","eventKey","eventNode","getBroadcastTargets","blocks","broadcastTargets","broadcastForBlock","getBackdropTargets","vm","backdropTargets","backdropTarget","backdropStartTarget","checkIfBackdropExists","getCloneTargets","cloneTargets","cloneTarget","cloneSendTarget","soup_","genUid","length","soupLength","i","charAt","Math","random","join","getBlockMap","target","Object","_blocks","blockKey","sprite","blockClone","JSON","parse","stringify","changeBlockIds","generateCFG","runtime","Mapping","nextBackDropNodes","shadow","customBlockDefinitions","inputs","custom_block","customBlockPrototype","proccode","mutation","definitionCallKey","warn","keys","key","includes","parent","callsCustomBlock","definitionKeys","definitionKey","callee","userEventNode","BROADCAST_INPUT","broadcastForStatement","broadcastTarget","CLONE_OPTION","cloneCreateTarget","backdropChangeTarget","BACKDROP","eventIds","splitEventId","split","eventType","eventId","sendEvents","receiveEvents","size","type","sendNode","sender","receiver","changed","getTransitivePredecessors","delete","removeNode","backdropName","stage","getTargetForStage","backdrops","costumes","backDrop","idKeys","k","_values","hasOwnProperty","Array","toString","_entryNode","_exitNode","_nodes","_successors","_predecessors","successor","getNodeIds","_transitivePredecessors","pred","pred2","_transitiveSuccessors","succ2","_containsTransitiveSuccessors","pStartNode","pFirstNode","pSecondNode","transitiveSuccessors","iterator","done","toDot","renderedEdges","result","dot","toCoverageDot","uncoveredKeys","nodes","renderedNodes","graph","cloned","reversed","PostDominatorTree","_containsAll","firstSet","secondSet","_getDominators","dominanceMap","nodesWithoutEntry","currentDominators","newDominators","firstPred","predDominators","predecessor","currentPredDominators","predDom","_buildDominanceTree","dominanceTree","q","m","shift","dominators","reversedCFG","getAllBlocks","reduce","acc","assign","countAllBlocks","statement","SUBSTACK","SUBSTACK2","BROADCAST_OPTION","toLowerCase","direction","parseInt","DIRECTION","NUM","xPosition","X","yPosition","Y","sizeValue","SIZE","costume","COSTUME","backdrop","variableValue","VALUE","TEXT","STOP_OPTION","KEY_OPTION"],"mappings":"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","file":"scratch-analysis.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./index.js\");\n","export {Graph, GraphNode} from './src/graph-utils';\nexport {generateCFG, ControlFlowGraph, UserEventNode, EventNode} from './src/control-flow-graph';\nexport {generateCDG, ControlDependenceGraph} from './src/control-dependence-graph';\nexport {\n    ControlFilter,\n    MotionFilter,\n    LooksFilter,\n    SoundFilter,\n    EventFilter,\n    VariableFilter,\n    ListFilter,\n    SensingFilter,\n    StatementFilter\n} from './src/block-filter';\n","const MotionFilter = {\n    directionChange: block =>\n        block.opcode === 'motion_turnright' ||\n        block.opcode === 'motion_turnleft' ||\n        block.opcode === 'motion_pointindirection' ||\n        block.opcode === 'motion_pointtowards',\n\n    directionSet: block =>\n        block.opcode === 'motion_pointindirection',\n\n    positionChange: block =>\n        block.opcode === 'motion_movesteps' ||\n        block.opcode === 'motion_goto' ||\n        block.opcode === 'motion_gotoxy' ||\n        block.opcode === 'motion_glideto' ||\n        block.opcode === 'motion_glidesecstoxy' ||\n        block.opcode === 'motion_changexby' ||\n        block.opcode === 'motion_changeyby' ||\n        block.opcode === 'motion_setx' ||\n        block.opcode === 'motion_sety',\n\n    positionSet: block =>\n        block.opcode === 'motion_gotoxy' ||\n        block.opcode === 'motion_glidesecstoxy',\n\n    xSet: block =>\n        block.opcode === 'motion_setx',\n\n    ySet: block =>\n        block.opcode === 'motion_sety',\n\n    motionBlock: block =>\n        block.opcode.startsWith('motion_') &&\n        !block.opcode.endsWith('_menu') && !(\n            block.opcode === 'motion_xposition' ||\n            block.opcode === 'motion_yposition' ||\n            block.opcode === 'motion_direction'\n        )\n};\nconst LooksFilter = {\n    backdropChange: block =>\n        block.opcode === 'looks_switchbackdroptoandwait' ||\n        block.opcode === 'looks_nextbackdrop' ||\n        block.opcode === 'looks_switchbackdropto',\n\n    nextBackdrop: block =>\n        block.opcode === 'looks_nextbackdrop',\n\n    backdropSet: block =>\n        block.opcode === 'looks_switchbackdroptoandwait' ||\n        block.opcode === 'looks_switchbackdropto',\n\n    costumeChange: block =>\n        block.opcode === 'looks_switchcostumeto' ||\n        block.opcode === 'looks_nextcostume',\n\n    costumeSet: block =>\n        block.opcode === 'looks_switchcostumeto',\n\n    sizeChange: block =>\n        block.opcode === 'looks_changesizeby' ||\n        block.opcode === 'looks_setsizeto',\n\n    sizeSet: block =>\n        block.opcode === 'looks_setsizeto',\n\n    visibilitySet: block =>\n        block.opcode === 'looks_show' ||\n        block.opcode === 'looks_hide',\n\n    sayBlock: block =>\n        block.opcode === 'looks_say' ||\n        block.opcode === 'looks_sayforsecs',\n\n    thinkBlock: block =>\n        block.opcode === 'looks_think' ||\n        block.opcode === 'looks_thinkforsecs',\n\n    backdropBlock: block =>\n        block.opcode === 'looks_backdrops',\n\n    looksBlock: block =>\n        block.opcode.startsWith('looks_') &&\n        !block.opcode.endsWith('_menu') && !(\n            block.opcode === 'looks_backdropnumbername' ||\n            block.opcode === 'looks_costumenumbername' ||\n            block.opcode === 'looks_size'\n        )\n};\n\nconst SoundFilter = {\n    play: block =>\n        block.opcode === 'sound_play' ||\n        block.opcode === 'sound_playuntildone',\n\n    soundBlock: block =>\n        block.opcode.startsWith('sound_') &&\n        !block.opcode.endsWith('_menu') && !(\n            block.opcode === 'sound_volume'\n        )\n};\n\nconst EventFilter = {\n    userEvent: block =>\n        block.opcode === 'event_whenflagclicked' ||\n        block.opcode === 'event_whenthisspriteclicked' ||\n        block.opcode === 'event_whenstageclicked' ||\n        block.opcode === 'event_whenkeypressed' ||\n        block.opcode === 'event_whengreaterthan',\n\n    greenFlag: block =>\n        block.opcode === 'event_whenflagclicked',\n\n    hatEvent: block =>\n        block.opcode === 'event_whenflagclicked' ||\n        block.opcode === 'event_whenthisspriteclicked' ||\n        block.opcode === 'event_whenstageclicked' ||\n        block.opcode === 'event_whenbackdropswitchesto' ||\n        block.opcode === 'event_whengreaterthan' ||\n        block.opcode === 'event_whenbroadcastreceived' ||\n        block.opcode === 'event_whenkeypressed',\n\n    broadcastSend: block =>\n        block.opcode === 'event_broadcast' ||\n        block.opcode === 'event_broadcastandwait',\n\n    broadcastReceive: block =>\n        block.opcode === 'event_whenbroadcastreceived',\n\n    broadcastMenu: block =>\n        block.opcode === 'event_broadcast_menu',\n\n    cloneCreate: block =>\n        block.opcode === 'control_create_clone_of',\n\n    cloneStart: block =>\n        block.opcode === 'control_start_as_clone',\n\n    cloneMenu: block =>\n        block.opcode === \"control_create_clone_of_menu\",\n\n    backdropStart: block =>\n        block.opcode === 'event_whenbackdropswitchesto',\n\n    backdropChange: block =>\n        block.opcode === 'looks_switchbackdropto',\n\n    eventSend: block =>\n        EventFilter.broadcastSend(block) ||\n        EventFilter.cloneCreate(block),\n\n    eventReceive: block =>\n        EventFilter.broadcastReceive(block) ||\n        EventFilter.cloneStart(block),\n\n    eventBlock: block =>\n        block.opcode.startsWith('event_') &&\n        !block.opcode.endsWith('_menu') &&\n        block.opcode !== 'event_touchingobjectmenu'\n};\n\nconst ControlFilter = {\n    controlBlock: block =>\n        block.opcode.startsWith('control_') &&\n        !block.opcode.endsWith('_menu'),\n\n    singleBranch: block =>\n        block.opcode === 'control_if' ||\n        block.opcode === 'control_repeat' ||\n        block.opcode === 'control_repeat_until' ||\n        block.opcode === 'control_forever' ||\n        block.opcode === 'control_wait_until',\n\n    doubleBranch: block =>\n        block.opcode === 'control_if_else',\n\n    branch: block =>\n        ControlFilter.singleBranch(block) || ControlFilter.doubleBranch(block),\n\n    hatBlock: block =>\n        EventFilter.hatEvent(block) || block.opcode === 'control_start_as_clone',\n\n    executionHaltingBlock: block =>\n        block.opcode === 'control_wait' ||\n        block.opcode === 'looks_thinkforsecs' ||\n        block.opcode === 'looks_sayforsecs' ||\n        block.opcode === 'motion_glidesecstoxy' ||\n        block.opcode === 'motion_glideto' ||\n        block.opcode === 'sound_playuntildone' ||\n        block.opcode === 'text2speech_speakAndWait'\n};\n\nconst SensingFilter = {\n    askBlock: block =>\n        block.opcode === 'sensing_askandwait',\n    sensingBlock: block =>\n        block.opcode === 'sensing_askandwait' ||\n        block.opcode === 'sensing_setdragmode' ||\n        block.opcode === 'sensing_resettimer'\n};\n\nconst VariableFilter = {\n    set: block =>\n        block.opcode === 'data_setvariableto',\n    update: block =>\n        block.opcode === 'data_setvariableto' ||\n        block.opcode === 'data_changevariableby',\n    variableBlock: block =>\n        block.opcode === 'data_setvariableto' ||\n        block.opcode === 'data_changevariableby' ||\n        block.opcode === 'data_showvariable' ||\n        block.opcode === 'data_hidevariable'\n};\n\nconst OperatorFilter = {\n    arithmetic: block =>\n        block.opcode === 'operator_add' ||\n        block.opcode === 'operator_subtract' ||\n        block.opcode === 'operator_multiply' ||\n        block.opcode === 'operator_divide',\n\n    relational: block =>\n        block.opcode === 'operator_equals' ||\n        block.opcode === 'operator_lt' ||\n        block.opcode === 'operator_gt',\n\n    logical: block =>\n        block.opcode === 'operator_and' ||\n        block.opcode === 'operator_or',\n\n    negatable: block =>\n        block.opcode === 'sensing_touchingobject' ||\n        block.opcode === 'sensing_touchingcolor' ||\n        block.opcode === 'sensing_coloristouchingcolor' ||\n        block.opcode === 'sensing_keypressed' ||\n        block.opcode === 'sensing_mousedown' ||\n        block.opcode === 'operator_contains' ||\n        block.opcode === 'operator_not' ||\n        OperatorFilter.logical(block) ||\n        OperatorFilter.relational(block)\n}\n\nconst ListFilter = {\n    update: block =>\n        block.opcode === 'data_addtolist' ||\n        block.opcode === 'data_deleteoflist' ||\n        block.opcode === 'data_deletealloflist' ||\n        block.opcode === 'data_insertatlist' ||\n        block.opcode === 'data_replaceitemoflist' ||\n        block.opcode === 'data_replaceitemoflist',\n\n    listBlock: block =>\n        ListFilter.update(block) ||\n        block.opcode === 'data_showlist' ||\n        block.opcode === 'data_hidelist'\n}\n\nconst MusicFilter = {\n    musicBlock: block =>\n        block.opcode.startsWith('music_')\n}\n\nconst CustomFilter = {\n    customBlock: block =>\n        block.opcode.startsWith('procedures_'),\n\n    defineBlock: block =>\n        block.opcode === 'procedures_definition'\n}\n\nconst PenFilter = {\n    penBlock: block =>\n        block.opcode.startsWith('pen_')\n}\n\nconst Text2SpeechFilter = {\n    text2speechBlock: block =>\n        block.opcode.startsWith('text2speech_')\n}\n\nconst StatementFilter = {\n    isStatementBlock: block => {\n        if (block.topLevel && !EventFilter.eventBlock(block) &&\n            !EventFilter.cloneStart(block) &&\n            !CustomFilter.customBlock(block)) {\n            // loose blocks\n            return false;\n        }\n        if (block.opcode.endsWith('_menu')) {\n            return false;\n        }\n        return MotionFilter.motionBlock(block) ||\n            LooksFilter.looksBlock(block) ||\n            SoundFilter.soundBlock(block) ||\n            EventFilter.eventBlock(block) ||\n            ControlFilter.controlBlock(block) ||\n            SensingFilter.sensingBlock(block) ||\n            ListFilter.listBlock(block) ||\n            VariableFilter.variableBlock(block) ||\n            MusicFilter.musicBlock(block) ||\n            CustomFilter.customBlock(block) ||\n            PenFilter.penBlock(block) ||\n            Text2SpeechFilter.text2speechBlock(block);\n    }\n};\n\nexport {\n    ControlFilter,\n    MotionFilter,\n    LooksFilter,\n    SoundFilter,\n    EventFilter,\n    VariableFilter,\n    OperatorFilter,\n    ListFilter,\n    SensingFilter,\n    StatementFilter,\n    MusicFilter,\n    CustomFilter,\n    PenFilter,\n    Text2SpeechFilter\n};\n","import {Edge, Graph, GraphNode, reverseGraph, cloneGraph} from './graph-utils';\nimport {computePostDominatedTree, PostDominatorTree} from './post-dominator-tree'; // eslint-disable-line no-unused-vars\nimport {ControlFlowGraph} from './control-flow-graph';\n\nclass ControlDependenceGraph extends Graph {\n}\n\n/**\n * Adds the given start node to the CFG.\n *\n * @param {ControlFlowGraph} cfg - the control flow graph which is augmented.\n * @param {GraphNode} start - the start node which is added to the CFG.\n * @private\n */\nconst _augmentCFG = (cfg, start) => {\n    cfg.addNode(start);\n    cfg.addEdge(start, cfg.entry());\n    cfg.addEdge(start, cfg.exit());\n};\n\n/**\n * \"Find S, a set of edges in the CFG such that in the post-dominator tree\n * the edge target is not an ancestor of the target source.\"\n *\n * @param {ControlFlowGraph} cfg - the control flow graph.\n * @param {PostDominatorTree} reversedPDT - the reversed PDT, to find ancestors easier.\n * @returns {Set<Edge>} - a set of edges.\n * @private\n */\nconst _findEdgeSetS = (cfg, reversedPDT) => {\n    const allNodes = new Set(cfg.getAllNodes());\n    const edges = new Set();\n\n    for (const node of allNodes) {\n        for (const succ of cfg.successors(node.id)) {\n            if (!reversedPDT.getTransitiveSuccessors(node).has(succ)) {\n                edges.add(new Edge(node, succ));\n            }\n        }\n    }\n    return edges;\n};\n\n/**\n * Computes the least common ancestor for each edge from a set of edges and returns a mapping from\n * edge to computed least common ancestor, the controlling dependency of both edge nodes.\n *\n * @param {PostDominatorTree} postDominatedTree - the PDT used to extract the information.\n * @param {Set<Edge>} edges - a set of edges for which the least common ancestor is computed.\n * @returns {Map<Edge, GraphNode>} - a mapping from edges to a single node, the least common ancestor.\n * @private\n */\nconst _computeLeastCommonAncestors = (postDominatedTree, edges) => {\n    const leastCommonAncestors = new Map();\n\n    for (const edge of edges) {\n        const leastCommonAncestor = postDominatedTree.getLeastCommonAncestor(edge.from, edge.to);\n        leastCommonAncestors.set(edge, leastCommonAncestor);\n    }\n    return leastCommonAncestors;\n};\n\n\n/**\n * Finds and returns all control dependencies between nodes using the PDT as well as edges and their\n * least common ancestor.\n *\n * @param {PostDominatorTree} postDominatedTree - the PDT used to extract the information.\n * @param {Set<Edge>} edges - a set of edges.\n * @param {Map<Edge, GraphNode>} leastCommonAncestors - a mapping from edges to the least common ancestor,\n *                                                      the control dependency of the edge nodes.\n * @returns {Map<GraphNode, Set<GraphNode>>} - a mapping from nodes to their control dependencies.\n * @private\n */\nconst _findControlDependencies = (postDominatedTree, edges, leastCommonAncestors) => {\n    const controlDependencyMap = new Map();\n\n    for (const edge of edges) {\n        const markedNodes = new Set();\n        const l = leastCommonAncestors.get(edge);\n\n        if (edge.from === l) {\n            markedNodes.add(l);\n        }\n\n        let current = edge.to;\n        while (current !== undefined && current !== l) {\n            markedNodes.add(current);\n            const preds = new Set(postDominatedTree.predecessors(current.id));\n            // We can just assume preds has size === 1\n            current = preds.values().next().value;\n        }\n\n        const alreadyMarked = controlDependencyMap.get(edge.from);\n        if (alreadyMarked) {\n            for (const marked of alreadyMarked) {\n                markedNodes.add(marked);\n            }\n        }\n        controlDependencyMap.set(edge.from, markedNodes);\n    }\n    return controlDependencyMap;\n};\n\n/**\n * Computes and returns a Control Dependence Graph (CDG) from a CFG and its corresponding PDT.\n *\n * @param {ControlFlowGraph} cfg - the control flow graph the CDG is generated from.\n * @param {PostDominatorTree} postDominatedTree - the PDT.\n * @param {PostDominatorTree} reversedPDT - the PDT, but reversed.\n * @returns {ControlDependenceGraph} - the resulting Control Dependence Graph (CDG).\n * @private\n */\nconst _computeControlDependenceGraph = (cfg, postDominatedTree, reversedPDT) => {\n    const start = new GraphNode('start');\n    const controlDependenceGraph = new ControlDependenceGraph(start);\n\n    _augmentCFG(cfg, start);\n\n    const allNodes = new Set(cfg.getAllNodes());\n    for (const node of allNodes) {\n        controlDependenceGraph.addNode(node);\n    }\n\n    // Find S, a set of edges in the CFG such that in the post-dominator tree\n    // the edge target is not an ancestor of the target source.\n    const edges = _findEdgeSetS(cfg, reversedPDT);\n\n    // For each edge in S, find L, the least common ancestor in PDT\n    const leastCommonAncestors = _computeLeastCommonAncestors(postDominatedTree, edges);\n\n    // Consider each edge (A,B) in S and its corresponding L.\n    // Traverse backwards in PDT from B to L, marking each node visited;\n    // mark L only if L = A.\n    const controlDependencyMap = _findControlDependencies(postDominatedTree, edges, leastCommonAncestors);\n\n    // Statements representing all marked nodes are control dependent on A with\n    // the label that is on edge (A,B).\n    for (const [node, controlDependencies] of controlDependencyMap.entries()) {\n        for (const controlDependency of controlDependencies) {\n            controlDependenceGraph.addEdge(node, controlDependency);\n        }\n    }\n\n    return controlDependenceGraph;\n};\n\n/**\n * Generates and returns a Control Dependence Graph (CDG) for\n * a given Control Flow Graph (CFG), which is not altered.\n *\n * @param {ControlFlowGraph} cfg - the control flow graph the control dependence graph is generated from.\n * @returns {ControlDependenceGraph} the generated control dependence graph.\n */\nconst generateCDG = cfg => {\n    cfg = cloneGraph(cfg);\n    const postDominatedTree = computePostDominatedTree(cfg);\n    const reversedPostDominatedTree = reverseGraph(postDominatedTree);\n    const cdg = _computeControlDependenceGraph(cfg, postDominatedTree, reversedPostDominatedTree);\n    return cdg;\n};\n\nexport {\n    generateCDG,\n    ControlDependenceGraph\n};\n","import {ControlFilter, EventFilter, LooksFilter, StatementFilter} from './block-filter';\nimport {Extract, getBranchStart, getElseBranchStart} from './utils';\nimport {Graph, GraphNode, Mapping} from './graph-utils';\n\n/**\n * Class representing a Control Flow Graph (CFG).\n * Next to a collection of nodes, the CFG contains arbitrary entry and exit node.\n *\n * The CFG's nodes are private, but can be queried with node related methods.\n *\n * @see Graph\n * @see GraphNode\n */\nexport class ControlFlowGraph extends Graph {\n    constructor() {\n        const entryNode = new GraphNode('Entry');\n        const exitNode = new GraphNode('Exit');\n\n        super(entryNode, exitNode);\n    }\n}\n\n/**\n * Dummy node for an broadcast send or clone create event.\n *\n * @see GraphNode\n */\nexport class EventNode extends GraphNode {\n    constructor(id, event) {\n        super(id);\n\n        this.event = event;\n    }\n}\n\n/**\n * Dummy node for a user triggered event.\n *\n * @see GraphNode\n */\nexport class UserEventNode extends GraphNode {\n    constructor(id, userEvent) {\n        super(id);\n\n        this.userEvent = userEvent;\n    }\n}\n\n/**\n * Extends the successors of the last node inside the basic block with successors.\n * Before extending the successors, the exit node is removed to remove unwanted and duplicate edges to the exit node.\n * If the given should successors contains the exit node, it will be part of the successors.\n *\n * @param {ControlFlowGraph} cfg - the CFG containing all nodes.\n * @param {Mapping} successors - a collection of edges inside the CFG, mapping of node identifier to nodes.\n * @param {Array<GraphNode>} shouldSuccessors - the successors will extend the existing successors.\n * @param {GraphNode} startNode - the start node of the basic block.\n * @param {boolean} extra - whether extra handling for broadcast and cloning statements should be made.\n */\nconst _extendBasicBlockSuccessors = (cfg, successors, shouldSuccessors, startNode, extra) => {\n    _extendBasicBlockSuccessors2(cfg, successors, shouldSuccessors, startNode, extra, new Set());\n};\n\nconst _extendBasicBlockSuccessors2 = (cfg, successors, shouldSuccessors, startNode, extra, visited) => {\n    let node = startNode;\n    while (node.block) {\n        // Extra handling for broadcast and cloning send statements\n        if (extra && EventFilter.eventReceive(node.block)) {\n            if (visited.has(node)) {\n                break;\n            }\n            visited.add(node);\n            for (const succ of successors.get(node.id)) {\n                if (succ instanceof EventNode) {\n                    for (const recv of successors.get(succ.id)) {\n                        if (recv.block && EventFilter.eventReceive(recv.block)) {\n                            _extendBasicBlockSuccessors2(cfg, successors, shouldSuccessors, recv, extra, visited);\n                        }\n                    }\n                }\n            }\n        }\n        if (!node.block.next) {\n            break;\n        }\n\n        node = cfg.getNode(node.block.next);\n    }\n\n    if (node === cfg.exit()) {\n        // Should not set successors of exit node\n        return;\n    }\n\n    // If the exit node is part of the to be set successors that's okay, but it has to be removed here to avoid\n    //   a) unwanted edges to the exit note\n    //   b) duplicate edges to exit note\n    successors.remove(node.id, cfg.exit());\n\n    for (const suc of shouldSuccessors) {\n        successors.put(node.id, suc);\n    }\n};\n\n/**\n * Fixes the successors in a CFG of a given control statement or its succeeding branches,\n * depending on the type of control statement.\n *\n * @param {ControlFlowGraph} cfg - the CFG containing all nodes.\n * @param {Mapping<GraphNode>} successors - a {@link Mapping} from nodes to their successors.\n * @param {GraphNode} controlNode - the node of the to be fixed control statement.\n * @private\n */\nconst _fixControlStatement = (cfg, successors, controlNode) => {\n    const controlStmt = controlNode.block;\n    switch (controlStmt.opcode) {\n        case 'control_repeat_until':\n        case 'control_repeat': {\n            const branchStart = getBranchStart(controlStmt);\n            // Check whether the branch is empty.\n            if (branchStart) {\n                _extendBasicBlockSuccessors(cfg, successors, [controlNode], cfg.getNode(branchStart), true);\n            }\n\n            // Adding a \"fake\" edge from the loop head to the exit node turns repeat loops into control dependencies.\n            successors.put(controlNode.id, cfg.exit());\n\n            break;\n        }\n        case 'control_forever': {\n            const branchStart = getBranchStart(controlStmt);\n            if (branchStart) {\n                _extendBasicBlockSuccessors(cfg, successors, [controlNode], cfg.getNode(branchStart), true);\n                successors.set(controlNode.id, [cfg.getNode(branchStart), cfg.exit()]);\n            } else {\n                successors.set(controlNode.id, [cfg.exit()]);\n            }\n\n            break;\n        }\n        case 'control_if': {\n            const ifBranchStart = getBranchStart(controlStmt);\n            if (ifBranchStart) {\n                const afterControl = successors.getAsArray(controlNode.id)\n                    .filter(n => n.id !== ifBranchStart);\n\n                _extendBasicBlockSuccessors(cfg, successors, afterControl, cfg.getNode(ifBranchStart), false);\n            }\n            break;\n        }\n        case 'control_if_else': {\n            const ifBranchStart = getBranchStart(controlStmt);\n            const elseBranchStart = getElseBranchStart(controlStmt);\n\n            if (ifBranchStart && elseBranchStart) {\n                const afterControl = successors.getAsArray(controlNode.id)\n                    .filter(n => n.id !== ifBranchStart && n.id !== elseBranchStart);\n                successors.removeAll(controlNode.id, afterControl);\n\n                _extendBasicBlockSuccessors(cfg, successors, afterControl, cfg.getNode(ifBranchStart), false);\n                _extendBasicBlockSuccessors(cfg, successors, afterControl, cfg.getNode(elseBranchStart), false);\n            } else if (ifBranchStart) {\n                // Only if branch has content\n                const afterControl = successors.getAsArray(controlNode.id)\n                    .filter(n => n.id !== ifBranchStart);\n\n                _extendBasicBlockSuccessors(cfg, successors, afterControl, cfg.getNode(ifBranchStart), false);\n            } else if (elseBranchStart) {\n                // Only else branch has content\n                const afterControl = successors.getAsArray(controlNode.id)\n                    .filter(n => n.id !== elseBranchStart);\n\n                _extendBasicBlockSuccessors(cfg, successors, afterControl, cfg.getNode(elseBranchStart), false);\n            } else {\n                // None has content -> no changes\n            }\n            break;\n        }\n        case 'control_stop': {\n            const stopOption = Extract.stopOption(controlStmt);\n            switch (stopOption) {\n                case 'this script':\n                case 'all': {\n                    successors.set(controlNode.id, [cfg.exit()]);\n                    break;\n                }\n                case 'other scripts in sprite':\n                case 'other scripts in stage':\n                    // Since this is just a 'normal' block after which other blocks can follow, we can ignore it.\n                    break;\n                default:\n                    console.log(`Unrecognized stop option ${stopOption}.`);\n            }\n            break;\n        }\n        case 'control_delete_this_clone':\n            successors.set(controlNode.id, [cfg.exit()]);\n            break;\n        case 'control_wait_until':\n            successors.put(controlNode.id, cfg.getNode(controlNode.id));\n            successors.put(controlNode.id, cfg.exit());\n            break;\n        case 'control_start_as_clone':\n        case 'control_create_clone_of':\n            // Can ignore these cases\n            break;\n        default: {\n            console.log(`Unhandled control statement ${controlStmt.opcode} for block ${controlStmt.id}`);\n        }\n    }\n};\n\n/**\n * Helper function to recursively fix control statements.\n * Starting from the given node, depth first.\n *\n * @param {ControlFlowGraph} cfg - the control flow graph which control statements should be fixed.\n * @param {Mapping<GraphNode>} successors - a {@link Mapping} from nodes to their successors.\n * @param {GraphNode} node - the start node.\n * @param {Array<GraphNode>} visited - a list of already visited nodes.\n * @private\n */\nconst _fixControlStatements = (cfg, successors, node, visited) => {\n    if (visited.find(n => n.id === node.id)) {\n        return;\n    }\n    visited.push(node);\n\n    const block = node.block;\n    if (block && ControlFilter.controlBlock(block) && !ControlFilter.executionHaltingBlock(block)) {\n        _fixControlStatement(cfg, successors, node);\n    }\n\n        // We add a \"fake\" edge from execution halting Blocks to the exit node in order to turn those blocks\n    // into control dependencies.\n    else if (block && ControlFilter.executionHaltingBlock(block)) {\n        successors.put(node.id, cfg.exit());\n    }\n\n    for (const next of successors.get(node.id)) {\n        _fixControlStatements(cfg, successors, next, visited);\n    }\n};\n\n/**\n * Calls a recursive helper function to fix control statements from the Entry node, depth first.\n *\n * @param {ControlFlowGraph} cfg - the control flow graph which control statements should be fixed.\n * @param {Mapping<GraphNode>} successors - a {@link Mapping} from nodes to their successors.\n */\nconst fixControlStatements = (cfg, successors) => {\n    _fixControlStatements(cfg, successors, cfg.entry(), []);\n};\n\n/**\n * Checks for a given user event node whether a preceeding user event node exists.\n * If the user events exists, it is returned.\n * If not, it is added to the given control flow graph\n *\n * @param {Array} targets - the targets of the program. Used to identify from which target a block is.\n * @param {ControlFlowGraph} cfg - the control flow graph.\n * @param {Mapping<GraphNode>} successors - a mapping from nodes to their successors.\n * @param {Map<string, GraphNode>} userEvents - a mapping from event key to user event node.\n * @param {GraphNode} node - the node that is initially checked. A successor of the user event node.\n * @returns {GraphNode} - the user event node, either existing or newly created.\n */\nconst addOrGetUserEventNode = (targets, cfg, successors, userEvents, node) => {\n    const event = {\n        name: node.block.opcode.substring(10), // removes leading \"event_when\"\n        opcode: node.block.opcode\n    };\n    switch (node.block.opcode) {\n        case 'event_whenflagclicked': {\n            // necessary event information already complete\n            break;\n        }\n        case 'event_whenthisspriteclicked': {\n            event.value = Extract.clickedSprite(node.block);\n            break;\n        }\n        case 'event_whenstageclicked': {\n            event.value = 'Stage';\n            break;\n        }\n        case 'event_whenkeypressed': {\n            event.value = Extract.clickedKey(node.block);\n            break;\n        }\n        case 'event_whengreaterthan': {\n            // TODO: Technically, only sound is a user event but the block can also refer to the timer\n            event.value = node.block.fields.WHENGREATERTHANMENU;\n            break;\n        }\n    }\n\n    const eventKey = `${event.name}${event.value ? (`:${event.value}`) : ''}`;\n    let eventNode = userEvents.get(eventKey);\n    if (!eventNode) {\n        eventNode = new UserEventNode(eventKey, event);\n        cfg.addNode(eventNode);\n\n        successors.put(cfg.entry().id, eventNode);\n        successors.put(eventNode.id, cfg.exit());\n\n        userEvents.set(eventKey, eventNode);\n    }\n    return eventNode;\n};\n\n\nconst getBroadcastTargets = blocks => {\n    let broadcastTargets = new Set();\n    for (const block of blocks.values()) {\n        if (EventFilter.broadcastReceive(block)) {\n            const event = Extract.broadcastForBlock(block);\n            broadcastTargets.add(`broadcast:${event}`);\n        }\n    }\n    return broadcastTargets;\n}\n\nconst getBackdropTargets = (blocks, vm) => {\n    let backdropTargets = new Set();\n    for (const block of blocks.values()) {\n        if (EventFilter.backdropStart(block)) {\n            const backdropTarget = Extract.backdropStartTarget(block);\n            if (checkIfBackdropExists(vm, backdropTarget)) {\n                backdropTargets.add(`backdrop:${backdropTarget}`);\n            }\n        }\n    }\n    return backdropTargets;\n}\n\nconst getCloneTargets = blocks => {\n    let cloneTargets = new Set();\n    for (const block of blocks.values()) {\n        if (EventFilter.cloneStart(block)) {\n            const cloneTarget = Extract.cloneSendTarget(block);\n            cloneTargets.add(`clone:${cloneTarget}`);\n        }\n    }\n    return cloneTargets;\n}\n\n/**\n * Create unique block ID\n * Based on https://github.com/LLK/scratch-blocks/blob/develop/core/utils.js\n * Soup omits $ because that would screw up the String.replaceAll later\n */\nconst soup_ = '!#()%*+,-./:;=?@[]^_`{|}~' + // $\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\nexport const genUid = function () {\n    var length = 20;\n    var soupLength = soup_.length;\n    var id = [];\n    for (var i = 0; i < length; i++) {\n        id[i] = soup_.charAt(Math.random() * soupLength);\n    }\n    return id.join('');\n};\n\nexport const getBlockMap = targets => {\n    let blocks = new Map()\n    for (const target of targets) {\n        for (const block of Object.values(target.blocks._blocks)) {\n            const blockKey = `${block.id}-${target.sprite.name}`;\n            // Create a deep clone for the CFG to not alter the block residing in the Scratch-VM.\n            const blockClone = JSON.parse(JSON.stringify(block))\n            blockClone['target'] = target.sprite.name;\n            changeBlockIds(blockClone, target)\n            blocks.set(blockKey, blockClone);\n        }\n    }\n    return blocks;\n}\n\n\n/**\n * Constructs an interprocedural control flow graph (CFG) for all blocks of a program.\n *\n * The given blocks represent the Abstract Syntax Tree (AST) of each script.\n * This method adds interprodecural edges from broadcast send to broadcast receive statements.\n *\n * Furthermore, this method updates the control statements, since their AST information cannot\n * be used directly for CFG generation.\n *\n * @param {VirtualMachine} vm - the instance of the current virtual machine state.\n * Contains all blocks in the program, used to construct the CFG.\n * @return {ControlFlowGraph} - a newly generated {@link ControlFlowGraph}.\n */\nexport const generateCFG = vm => {\n    // So-called \"renderer targets\" (the individual sprites and the stage) in the current project.\n    const targets = vm.runtime.targets;\n\n    // To avoid duplicates in the CFG we save blocks using the key combination blockId-SpriteName, where SpriteName\n    // corresponds to the name of the sprite the given block is contained in.\n    let blocks = getBlockMap(targets);\n\n    const backdropTargets = getBackdropTargets(blocks, vm);\n    const broadcastTargets = getBroadcastTargets(blocks);\n    const cloneTargets = getCloneTargets(blocks);\n\n    const cfg = new ControlFlowGraph();\n    const userEvents = new Map();\n    const eventSend = new Mapping();\n    const eventReceive = new Mapping();\n    const successors = new Mapping();\n    const nextBackDropNodes = [];\n\n    // First, we insert all nodes into the CFG.\n    for (const [id, block] of blocks.entries()) {\n\n        // Certain Scratch blocks are not related to control flow; they are not \"statement blocks\". For example, none\n        // of the blocks in the \"Operators\" category (e.g., arithmetic and boolean operators) are statement blocks.\n        // For CFG construction, we must ignore such blocks.\n        if (!StatementFilter.isStatementBlock(block)) {\n            continue;\n        }\n\n        // Furthermore, many scratch blocks are \"parameterized\". For example, the \"Say\" block or a custom block accepts\n        // text. These text parameters are considered blocks themselves by Scratch but they are not related to control\n        // flow. We can identify such blocks by the fact that they are drawn with a shadow.\n        if (block.shadow) {\n            continue;\n        }\n\n        cfg.addNode(new GraphNode(id, block));\n    }\n\n    /*\n     * A custom block in Scratch is referred to via its so called \"proccode\". The proccode is essentially the name\n     * of the custom block given by the user when he/she defined the custom block.\n     *\n     * There are three kinds of opcodes related to custom blocks.\n     *  - procedures_definition: represents the definition of a custom block; identified by its proccode\n     *  - procedures_call: represents the call of a custom block; refers to the procedures_definition via its proccode\n     *  - procedures_prototype: The proccode is usually directly accessible in the procedures_definition itself.\n     *    However, this is not always the case; we need to query the procedures_prototype which then contains a\n     *    reference to the corresponding procedures_definition.\n     */\n    const customBlockDefinitions = new Map();\n    // Maps proccodes to the corresponding procedures_definition. The key  is formed by combining the proccode\n    // with the name of the sprite in which the given block is contained in. This is necessary since multiple sprites\n    // could have differing procedure_definitions with the same proccode.\n    for (const block of blocks.values()) {\n        if (block.opcode === 'procedures_definition') {\n            if (block.inputs.custom_block.block) {\n                const customBlockPrototype = blocks.get(block.inputs.custom_block.block);\n                const proccode = customBlockPrototype.mutation.proccode;\n                let definitionCallKey = proccode + \"-\" + block.target;\n                if (customBlockDefinitions.has(definitionCallKey)) {\n                    console.warn(\"Duplicate procedure definition for the custom block: \", proccode);\n                    console.warn(\"Scratch will only execute one single procedure definition. Consider removing duplicates for a better code quality!\")\n                    const keys = [...customBlockDefinitions.keys()].filter(key => key.includes(definitionCallKey));\n                    definitionCallKey += \"-\" + keys.length;\n                }\n                customBlockDefinitions.set(definitionCallKey, new GraphNode(block.id, block));\n            }\n        }\n    }\n\n    // Now, we establish the connections between the nodes.\n    for (const node of cfg.getAllNodes()) {\n        if (node.block.parent) {\n            successors.put(node.block.parent, node);\n        }\n\n        const callsCustomBlock = node.block.opcode === 'procedures_call';\n        if (callsCustomBlock) { // Adds an edge from the call site of a custom block to its definition\n            const proccode = node.block.mutation.proccode;\n            const definitionCallKey = proccode + \"-\" + node.block.target;\n            const definitionKeys = [...customBlockDefinitions.keys()].filter(key => key.includes(definitionCallKey));\n            for (const definitionKey of definitionKeys) {\n                const callee = customBlockDefinitions.get(definitionKey);\n                if (callee) {\n                    successors.put(node.id, callee)\n                } else {\n                    console.warn(\"Call to undefined procedure: \" + definitionCallKey);\n                }\n            }\n            // FIXME: there also need to be edges that go back from the definition to all its call sites\n        }\n\n        if (!node.block.next) {\n            // No exit node? Probably, the actual successors is the exit node\n            successors.put(node.id, cfg.exit());\n        }\n\n        // Special cases\n        if (EventFilter.userEvent(node.block)) {\n            const userEventNode = addOrGetUserEventNode(targets, cfg, successors, userEvents, node);\n            successors.put(userEventNode.id, node);\n        }\n        if (EventFilter.broadcastSend(node.block)) {\n            if (EventFilter.broadcastMenu(blocks.get(node.block.inputs.BROADCAST_INPUT.block))) {\n                const event = Extract.broadcastForStatement(blocks, node.block);\n                eventSend.put(`broadcast:${event}`, node);\n            } else {\n                // Add edges to all items in eventReceive starting with a message\n                for (const broadcastTarget of broadcastTargets) {\n                    eventSend.put(broadcastTarget, node);\n                }\n            }\n        }\n        if (EventFilter.broadcastReceive(node.block)) {\n            const event = Extract.broadcastForBlock(node.block);\n            eventReceive.put(`broadcast:${event}`, node);\n        }\n        if (EventFilter.cloneCreate(node.block)) {\n            if (EventFilter.cloneMenu([node.block.inputs.CLONE_OPTION.block])) {\n                let cloneTarget = Extract.cloneCreateTarget(blocks, node.block);\n                if (cloneTarget === '_myself_') {\n                    cloneTarget = Extract.cloneSendTarget(node.block);\n                }\n                eventSend.put(`clone:${cloneTarget}`, node);\n            } else {\n                // Overapproximate since the target is not known statically\n                for (const cloneTarget of cloneTargets) {\n                    eventSend.put(cloneTarget, node);\n                }\n            }\n        }\n        if (EventFilter.cloneStart(node.block)) {\n            const cloneTarget = Extract.cloneSendTarget(node.block);\n            eventReceive.put(`clone:${cloneTarget}`, node);\n        }\n        if (EventFilter.backdropStart(node.block)) {\n            const backdropTarget = Extract.backdropStartTarget(node.block);\n            if (checkIfBackdropExists(vm, backdropTarget)) {\n                eventReceive.put(`backdrop:${backdropTarget}`, node);\n            }\n        }\n        if (LooksFilter.backdropChange(node.block)) {\n            let backdropTarget = undefined;\n            if(LooksFilter.backdropSet(node.block)){\n                backdropTarget =  Extract.backdropChangeTarget(blocks, node.block);\n            }\n            // Special handling for nextBackdrop statements.\n            if (LooksFilter.nextBackdrop(node.block) || backdropTarget === 'next backdrop') {\n                nextBackDropNodes.push(node)\n            } else if (LooksFilter.backdropBlock(blocks.get(node.block.inputs.BACKDROP.block))) {\n                if (checkIfBackdropExists(vm, backdropTarget)) {\n                    eventSend.put(`backdrop:${backdropTarget}`, node);\n                }\n            } else {\n                // Add edges to all items in eventReceive starting with backdrop\n                for (const backdropTarget of backdropTargets) {\n                    eventSend.put(backdropTarget, node);\n                }\n            }\n        }\n    }\n\n    // Afterwards, we add a global entry and exit node for the entire Scratch program.\n    cfg.addNode(cfg.entry());\n    cfg.addNode(cfg.exit());\n\n    // Adds an extra event node for Broadcast and Cloning events iff the respective events can be triggered.\n    const eventIds = new Set([...eventSend.keys(), ...eventReceive.keys()]);\n    for (const eventKey of eventIds) {\n\n        const splitEventId = eventKey.split(':')\n        const eventType = splitEventId[0];\n        const eventId = splitEventId[1];\n\n        const sendEvents = eventSend.get(eventKey);\n        const receiveEvents = eventReceive.get(eventKey);\n\n        // If we have matching sender and receiver of events, create connections between them.\n        if (sendEvents.size > 0 && receiveEvents.size > 0) {\n            const event = {type: eventType, value: eventId};\n            const sendNode = new EventNode(`${eventType}:${eventId}`, event);\n\n            cfg.addNode(sendNode);\n            successors.put(sendNode.id, cfg.exit());\n            for (const sender of sendEvents) {\n                successors.put(sender.id, sendNode);\n                for (const receiver of receiveEvents) {\n                    successors.put(sendNode.id, receiver);\n                }\n            }\n        }\n\n        // If we have blocks reacting to a backdrop switch and switch to next backdrop blocks, we over-approximate by\n        // linking all next backdrop blocks to every backdrop reacting block since we do not know which specific\n        // backdrop the next one will be.\n        if (eventType === 'backdrop' && receiveEvents.size > 0 && nextBackDropNodes.length > 0) {\n            const event = {type: eventType, value: eventId};\n            const sendNode = new EventNode(`${eventType}:${eventId}`, event);\n\n            cfg.addNode(sendNode);\n            successors.put(sendNode.id, cfg.exit());\n            for (const sender of nextBackDropNodes) {\n                successors.put(sender.id, sendNode);\n                for (const receiver of receiveEvents) {\n                    successors.put(sendNode.id, receiver);\n                }\n            }\n        }\n    }\n\n    // Branches of control statements most often have the exit node instead of the correct successor(s).\n    // This call sets the correct successors\n    fixControlStatements(cfg, successors);\n\n    // Add actual successors to graph.\n    for (const node of cfg.getAllNodes()) {\n        for (const succ of successors.get(node.id)) {\n            cfg.addEdge(node, succ);\n        }\n    }\n\n    // Remove statement blocks that have no predecessors in the CFG and are therefore unreachable.\n    let changed = true;\n    while (changed) {\n        changed = false;\n        for (const node of cfg.getAllNodes()) {\n            if (node.block !== undefined &&\n                StatementFilter.isStatementBlock(node.block) &&\n                cfg.getTransitivePredecessors(node).size === 0) {\n                // If we are about to delete a node form the CFG we also have to delete it from the successor's\n                // predecessor mapping in order to repeat those recursively if they\n                for (const suc of successors.get(node.id)) {\n                    const predecessors = cfg.predecessors(suc.id);\n                    predecessors.delete(node)\n                }\n                cfg.removeNode(node);\n                changed = true;\n            }\n        }\n    }\n    return cfg;\n};\n\nconst checkIfBackdropExists = (vm, backdropName) => {\n    const stage = vm.runtime.getTargetForStage();\n    const backdrops = stage.sprite.costumes;\n    for (const backDrop of Object.values(backdrops)) {\n        if (backDrop.name === backdropName) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction changeBlockIds(block, target) {\n    // TODO: Are there other keys that map to ids we need to replace here?\n    const idKeys = ['id', 'next', 'parent', 'block']\n    for (const k in block) {\n        if (typeof block[k] === 'object' && block[k] !== null) {\n            changeBlockIds(block[k], target)\n        } else if (idKeys.includes(k) && block[k] !== null) {\n            block[k] = block[k] + \"-\" + target.sprite.name;\n        }\n    }\n}\n\n","/**\n * A mapping from arbitrary identifiers to an array of values.\n */\nclass Mapping {\n    constructor () {\n        this._values = {};\n    }\n\n    keys () {\n        return Object.keys(this._values);\n    }\n\n    has (id) {\n        return this._values.hasOwnProperty(id);\n    }\n\n    get (id) {\n        if (!this._values.hasOwnProperty(id)) {\n            return new Set();\n        }\n        return this._values[id];\n    }\n    getAsArray (id) {\n        return Array.from(this.get(id));\n    }\n\n    put (id, value) {\n        if (!this._values.hasOwnProperty(id)) {\n            this._values[id] = new Set();\n        }\n        this._values[id].add(value);\n    }\n\n    set (id, values) {\n        this._values[id] = new Set(values);\n    }\n\n    remove (id, value) {\n        if (this._values.hasOwnProperty(id)) {\n            this._values[id].delete(value);\n        }\n    }\n\n    removeAll (id, values) {\n        for (const value of values) {\n            this.remove(id, value);\n        }\n    }\n}\n\nclass Edge {\n    constructor (from, to) {\n        this.from = from;\n        this.to = to;\n    }\n\n    toString () {\n        return `${this.from} -> ${this.to}`;\n    }\n}\n\n/**\n * Default graph node class.\n */\nclass GraphNode {\n    constructor (id, block) {\n        this.id = id;\n        this.block = block;\n    }\n\n    toString () {\n        if (this.block && this.block.opcode) {\n            return `${this.block.opcode}:${this.id.substring(0, 2)}-${this.block.target}`;\n        } else { // eslint-disable-line no-else-return\n            return this.id;\n        }\n    }\n}\n\n/**\n * Default graph class.\n */\nclass Graph {\n    constructor (entryNode, exitNode) {\n        this._entryNode = entryNode;\n        this._exitNode = exitNode;\n        this._nodes = {};\n        this._successors = new Mapping();\n        this._predecessors = new Mapping();\n    }\n    successors (id) {\n        return this._successors.get(id);\n    }\n    predecessors (id) {\n        return this._predecessors.get(id);\n    }\n\n    entry () {\n        return this._entryNode;\n    }\n\n    exit () {\n        return this._exitNode;\n    }\n\n    addNode (node) {\n        this._nodes[node.id] = node;\n    }\n\n    removeNode(node){\n        delete this._nodes[node.id];\n    }\n\n    addEdge (node, successor) {\n        this._predecessors.put(successor.id, node);\n        this._successors.put(node.id, successor);\n    }\n\n    getNode (id) {\n        return this._nodes[id];\n    }\n\n    getNodeIds () {\n        return Object.keys(this._nodes);\n    }\n\n    getAllNodes () {\n        return Object.values(this._nodes);\n    }\n\n    _transitivePredecessors (node, visited) {\n        const predecessors = new Set();\n        for (const pred of this.predecessors(node.id)) {\n            if (!visited.has(pred)) {\n                predecessors.add(pred);\n                visited.add(pred);\n                for (const pred2 of this._transitivePredecessors(pred, visited)) {\n                    predecessors.add(pred2);\n                }\n            }\n        }\n        return predecessors;\n    }\n\n    _transitiveSuccessors (node, visited) {\n        const successors = new Set();\n        for (const succ of this.successors(node.id)) {\n            if (!visited.has(succ)) {\n                successors.add(succ);\n                visited.add(succ);\n                for (const succ2 of this._transitiveSuccessors(succ, visited)) {\n                    successors.add(succ2);\n                }\n            }\n        }\n        return successors;\n    }\n\n    /**\n     * Gathers and returns all transitive predecessors of a given node.\n     * Transitive predecessors are all nodes which can be reached from a certain node\n     * in reverse direction.\n     *\n     * @param {GraphNode} node - the node which transitive predecessors are returned.\n     * @returns {Set<GraphNode>} - a set of all transitive predecessors.\n     */\n    getTransitivePredecessors (node) {\n        return this._transitivePredecessors(node, new Set());\n    }\n\n    /**\n     * Gathers and returns all transitive successors of a given node.\n     * Transitive successors are all nodes which can be reached from a certain node.\n     *\n     * @param {GraphNode} node - the node which transitive successors are returned.\n     * @returns {Set<GraphNode>} - a set of all transitive successors.\n     */\n    getTransitiveSuccessors (node) {\n        return this._transitiveSuccessors(node, new Set());\n    }\n\n    _containsTransitiveSuccessors (pStartNode, pFirstNode, pSecondNode) {\n        const transitiveSuccessors = this.getTransitiveSuccessors(pStartNode);\n        transitiveSuccessors.add(pStartNode);\n        return transitiveSuccessors.has(pFirstNode) && transitiveSuccessors.has(pSecondNode);\n    }\n\n    /**\n     * Finds and returns the least common ancestor of two given nodes in this graph.\n     *\n     * @param {GraphNode} pFirstNode - the first node.\n     * @param {GraphNode} pSecondNode - the second node.\n     * @returns {GraphNode} the least common ancestor of both given nodes.\n     */\n    getLeastCommonAncestor (pFirstNode, pSecondNode) {\n        let current = pFirstNode;\n        while (!this._containsTransitiveSuccessors(current, pFirstNode, pSecondNode)) {\n            // eslint-disable-next-line newline-per-chained-call\n            const iterator = this.predecessors(current.id).values().next();\n            if (iterator.done) {\n                return current;\n            }\n\n            current = iterator.value;\n        }\n        return current;\n    }\n\n    toDot () {\n        const edges = [];\n        for (const node of this.getAllNodes()) {\n            for (const succ of this.successors(node.id)) {\n                edges.push(`\\t\"${node.toString()}\" -> \"${succ.toString()}\";`);\n            }\n        }\n        const renderedEdges = edges.join('\\n');\n\n        const result = `digraph ScratchProgram {\\n${renderedEdges}\\n}`;\n\n        this.dot = result;\n        return result;\n    }\n\n    toCoverageDot (uncoveredKeys) {\n        const edges = [];\n        const nodes = [];\n        for (const node of this.getAllNodes()) {\n            if (uncoveredKeys.includes(node.id)) {\n                nodes.push(`\\t\"${node.toString()}\" [style=filled,fillcolor=\\\"red\\\",fontcolor=\\\"white\\\"];`);\n            } else {\n                nodes.push(`\\t\"${node.toString()}\" [style=filled,fillcolor=\\\"darkgreen\\\",fontcolor=\\\"white\\\"];`);\n            }\n            for (const succ of this.successors(node.id)) {\n                edges.push(`\\t\"${node.toString()}\" -> \"${succ.toString()}\";`);\n            }\n        }\n        const renderedEdges = edges.join('\\n');\n        const renderedNodes = nodes.join('\\n');\n\n        const result = `digraph ScratchProgram {\\n${renderedNodes}\\n${renderedEdges}\\n}`;\n\n        this.dot = result;\n        return result;\n    }\n\n    toString () {\n        if (!this.dot) {\n            return this.toDot();\n        }\n    }\n}\n\n/**\n * Creates a new cloned graph of a given graph.\n *\n * @param {Graph} graph - the graph to be cloned, will not be altered.\n * @returns {Graph} - a cloned graph.\n */\nconst cloneGraph = graph => {\n    const cloned = new Graph(graph.entry(), graph.exit());\n    for (const node of graph.getAllNodes()) {\n        cloned.addNode(node);\n        for (const succ of graph.successors(node.id)) {\n            cloned.addEdge(node, succ);\n        }\n    }\n    return cloned;\n};\n\n/**\n * Creates a new reversed graph of a given graph.\n *\n * @param {Graph} graph - the graph to be reverse, will not be altered.\n * @returns {Graph} - a reversed graph.\n */\nconst reverseGraph = graph => {\n    const reversed = new Graph(graph.exit(), graph.entry());\n    for (const node of graph.getAllNodes()) {\n        reversed.addNode(node);\n        for (const succ of graph.successors(node.id)) {\n            reversed.addEdge(succ, node);\n        }\n    }\n    return reversed;\n};\n\nexport {\n    Edge,\n    GraphNode,\n    Graph,\n    Mapping,\n    cloneGraph,\n    reverseGraph\n};\n","import {Graph, GraphNode, reverseGraph} from './graph-utils';\nimport {EventFilter} from './block-filter';\nimport {ControlFlowGraph, EventNode} from './control-flow-graph';\n\nclass PostDominatorTree extends Graph {\n}\n\n/**\n * Checks whether the first given set contains all elements of the second set.\n *\n * @param {Set<any>} firstSet - the first set.\n * @param {Set<any>} secondSet - the second set.\n * @returns {boolean} - true when all elements of the second set are in the first set, false otherwise.\n * @private\n */\nconst _containsAll = (firstSet, secondSet) => {\n    for (const value of secondSet) {\n        if (!firstSet.has(value)) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/**\n * Computes and returns a mapping of nodes to their dominating nodes.\n *\n * @param {ControlFlowGraph} cfg - the control flow graph.\n * @returns {Map<string, Set<GraphNode>>} - mapping from node-ids to dominating nodes.\n * @private\n */\nconst _getDominators = cfg => {\n    const entry = cfg.entry();\n    const allNodes = new Set(cfg.getAllNodes());\n    const dominanceMap = new Map();\n\n    dominanceMap.set(entry.id, new Set([entry]));\n\n    const nodesWithoutEntry = new Set(cfg.getAllNodes());\n    nodesWithoutEntry.delete(entry);\n\n    for (const node of nodesWithoutEntry) {\n        dominanceMap.set(node.id, new Set(allNodes));\n    }\n    let changed = true;\n    while (changed) {\n        changed = false;\n        for (const node of nodesWithoutEntry) {\n            const currentDominators = dominanceMap.get(node.id);\n\n            const newDominators = new Set();\n            newDominators.add(node);\n\n            const predecessors = new Set(cfg.predecessors(node.id));\n            if (!predecessors.size) {\n                continue;\n            }\n\n            // Special handling of broadcasts, so broadcast send events are NOT a control\n            // dependency of their \"natural\" successors, but only their receiving statements.\n            if (node.block && EventFilter.eventSend(node.block)) {\n                for (const pred of predecessors) {\n                    if (pred instanceof EventNode) {\n                        predecessors.delete(pred);\n                    }\n                }\n            }\n\n            const firstPred = Array.from(predecessors)[0];\n            const predDominators = new Set(dominanceMap.get(firstPred.id));\n            predecessors.delete(firstPred);\n            for (const predecessor of predecessors) {\n                const currentPredDominators = dominanceMap.get(predecessor.id);\n                // predDominators.intersect(currentPredDominators);\n                for (const predDom of predDominators) {\n                    if (!currentPredDominators.has(predDom)) {\n                        predDominators.delete(predDom);\n                    }\n                }\n            }\n\n            for (const predDom of predDominators) {\n                newDominators.add(predDom);\n            }\n\n            if (!_containsAll(currentDominators, newDominators) || !_containsAll(newDominators, currentDominators)) {\n                dominanceMap.set(node.id, newDominators);\n                changed = true;\n            }\n        }\n    }\n    return dominanceMap;\n\n};\n\n/**\n * Constructs a dominance tree for a given CFG and map of dominating nodes.\n *\n * @param {ControlFlowGraph} cfg - the control flow graph.\n * @param {Map<string, Set<GraphNode>>} dominanceMap - the mapping from node-id to dominating nodes.\n * @returns {PostDominatorTree} - the constructed dominance tree.\n * @private\n */\nconst _buildDominanceTree = (cfg, dominanceMap) => {\n    const dominanceTree = new PostDominatorTree(cfg.entry());\n    const allNodes = new Set(cfg.getAllNodes());\n\n    const q = [];\n    q.push(cfg.entry());\n    for (const node of allNodes) {\n        dominanceTree.addNode(node);\n\n        dominanceMap.get(node.id).delete(node);\n    }\n\n    while (q.length) {\n        const m = q.shift();\n        for (const node of allNodes) {\n            const dominators = dominanceMap.get(node.id);\n            if (dominators.size && dominators.has(m)) {\n                dominators.delete(m);\n                if (!dominators.size) {\n                    dominanceTree.addEdge(m, node);\n                    q.push(node);\n                }\n            }\n        }\n    }\n    return dominanceTree;\n};\n\n/**\n * Generates and returns a Post Dominated Tree (CDG) for\n * a given Control Flow Graph (CFG).\n *\n * @param {ControlFlowGraph} cfg - the control flow graph the PDT is generated from.\n * @returns {PostDominatorTree} - the generated post dominated tree.\n */\nconst computePostDominatedTree = cfg => {\n    const reversedCFG = reverseGraph(cfg);\n    const dominanceMap = _getDominators(reversedCFG);\n    const dominanceTree = _buildDominanceTree(reversedCFG, dominanceMap);\n\n    const start = new GraphNode('start');\n    dominanceTree.addNode(start);\n    dominanceTree.addEdge(dominanceTree.entry(), start);\n    return dominanceTree;\n};\n\nexport {\n    PostDominatorTree,\n    computePostDominatedTree\n};\n","const getAllBlocks = targets => targets.reduce((acc, target) => Object.assign(acc, target.blocks._blocks), {});\n\nconst countAllBlocks = targets => targets.reduce((acc, target) => acc + Object.keys(target.blocks._blocks).length, 0);\n\nconst getBranchStart = statement => {\n    if (statement.inputs.hasOwnProperty('SUBSTACK')) {\n        return statement.inputs.SUBSTACK.block;\n    }\n};\n\nconst getElseBranchStart = statement => {\n    if (statement.inputs.hasOwnProperty('SUBSTACK2')) {\n        return statement.inputs.SUBSTACK2.block;\n    }\n};\n\nconst Extract = {\n    broadcastForBlock: block =>\n        block.fields.BROADCAST_OPTION.value.toLowerCase(),\n    broadcastForStatement: (blocks, statement) =>\n        Extract.broadcastForBlock(blocks.get(statement.inputs.BROADCAST_INPUT.block)),\n    backdropStartTarget: (statement) =>\n        statement.fields.BACKDROP.value,\n    backdropChangeTarget: (blocks, statement) =>\n        blocks.get(statement.inputs.BACKDROP.block).fields.BACKDROP.value,\n    cloneCreateTarget: (blocks, statement) =>\n        blocks.get(statement.inputs.CLONE_OPTION.block).fields.CLONE_OPTION.value,\n    cloneSendTarget: block =>\n        block.target,\n    direction: (blocks, statement) =>\n        parseInt(blocks.get(statement.inputs.DIRECTION.block).fields.NUM.value, 10),\n    xPosition: (blocks, statement) =>\n        parseInt(blocks.get(statement.inputs.X.block).fields.NUM.value, 10),\n    yPosition: (blocks, statement) =>\n        parseInt(blocks.get(statement.inputs.Y.block).fields.NUM.value, 10),\n    sizeValue: (blocks, statement) =>\n        parseInt(blocks.get(statement.inputs.SIZE.block).fields.NUM.value, 10),\n    costume: (blocks, statement) =>\n        blocks.get(statement.inputs.COSTUME.block).fields.COSTUME.value,\n    backdrop: (blocks, statement) =>\n        blocks.get(statement.inputs.BACKDROP.block).fields.BACKDROP.value,\n    variableValue: (blocks, statement) =>\n        blocks.get(statement.inputs.VALUE.block).fields.TEXT.value,\n    stopOption: block =>\n        block.fields.STOP_OPTION.value,\n    clickedSprite: block =>\n        block.target,\n    clickedKey: block =>\n        block.fields.KEY_OPTION.value\n};\n\nexport {\n    countAllBlocks,\n    getAllBlocks,\n    getBranchStart,\n    getElseBranchStart,\n    Extract\n};\n"],"sourceRoot":""}